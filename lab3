library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity lab3 is
  port(CLOCK_50            : in  std_logic;
       KEY                 : in  std_logic_vector(3 downto 0);
       SW                  : in  std_logic_vector(17 downto 0);
       VGA_R, VGA_G, VGA_B : out std_logic_vector(9 downto 0);  -- The outs go to VGA controller
       VGA_HS              : out std_logic;
       VGA_VS              : out std_logic;
       VGA_BLANK           : out std_logic;
       VGA_SYNC            : out std_logic;
       VGA_CLK             : out std_logic);
end lab3;

architecture rtl of lab3 is

 --Component from the Verilog file: vga_adapter.v

  component vga_adapter
    generic(RESOLUTION : string);
    port (resetn                                       : in  std_logic;
          clock                                        : in  std_logic;
          colour                                       : in  std_logic_vector(2 downto 0);
          x                                            : in  std_logic_vector(7 downto 0);
          y                                            : in  std_logic_vector(6 downto 0);
          plot                                         : in  std_logic;
          VGA_R, VGA_G, VGA_B                          : out std_logic_vector(9 downto 0);
          VGA_HS, VGA_VS, VGA_BLANK, VGA_SYNC, VGA_CLK : out std_logic);
  end component;

  signal x      : std_logic_vector(7 downto 0);
  signal y      : std_logic_vector(6 downto 0);
  signal colour : std_logic_vector(2 downto 0);
  signal plot   : std_logic;

begin

  -- includes the vga adapter, which should be in your project 

  vga_u0 : vga_adapter
    generic map(RESOLUTION => "160x120") 
    port map(resetn    => KEY(3),
             clock     => CLOCK_50,
             colour    => colour,
             x         => x,
             y         => y,
             plot      => plot,
             VGA_R     => VGA_R,
             VGA_G     => VGA_G,
             VGA_B     => VGA_B,
             VGA_HS    => VGA_HS,
             VGA_VS    => VGA_VS,
             VGA_BLANK => VGA_BLANK,
             VGA_SYNC  => VGA_SYNC,
             VGA_CLK   => VGA_CLK);
             
  plot   <= not KEY(0);  
  y<="0000010";

-- process for changing color 
 process(all)

 variable x_mod_8 : integer;

 begin

 x_mod_8 :=  to_integer(unsigned(x)) mod 8;
 
 case x_mod_8 is

 when 0 => colour <= "000";
 when 1 => colour <= "001";
 when 2 => colour <= "010";
 when 3 => colour <= "011";
 when 4 => colour <= "100";
 when 5 => colour <= "101";
 when 6 => colour <= "110";
 when 7 => colour <= "111";
 when others => colour <= "000";

 end case;


 end process;

-- process for changing cord
  process(all)
    
    variable x_num : integer;  
    variable x_done: integer;
    
    begin 
      
      x_num := 0;
      
   if(rising_edge(CLOCK_50)) then 
    x_num := x_num+1;
    x <= std_logic_vector(to_unsigned(x_num,8));
  end if;
  if(x_num=159) then 
    x_num := 0;
    x_done :=1;
  end if;
    
  
  end process;
  
end rtl;



