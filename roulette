LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;
 
LIBRARY WORK;
USE WORK.ALL;

----------------------------------------------------------------------
--
--  This is the top level template for Lab 2.  Use the schematic
--  in the lab handout to guide you in creating this structural description.
--  The combinational blocks have already been designed in previous tasks,
--  and the spinwheel block is given to you.  Your task is to combine these
--  blocks, as well as add the various registers shown on the schemetic, and
--  wire them up properly.  The result will be a roulette game you can play
--  on your DE2.
--
-----------------------------------------------------------------------

ENTITY roulette IS
	PORT(   CLOCK_27 : IN STD_LOGIC; -- the fast clock for spinning wheel
		KEY : IN STD_LOGIC_VECTOR(3 downto 0);  -- includes slow_clock and reset
		SW : IN STD_LOGIC_VECTOR(17 downto 0);
		LEDG : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);  -- ledg
		HEX7 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 7
		HEX6 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 6
		HEX5 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 5
		HEX4 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 4
		HEX3 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 3
		HEX2 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 2
		HEX1 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);  -- digit 1
		HEX0 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)   -- digit 0
	);
END roulette;

ARCHITECTURE structural OF roulette IS

------------------- componenet declarations -----------------

  component win 
    -- win block
    PORT(    
             spin_result_latched : in unsigned(5 downto 0);  -- result of the spin (the winning number)
             bet_target : in unsigned(5 downto 0); -- target number for bet
             bet_modifier : in unsigned(3 downto 0); -- as described in the handout
             win_straightup : out std_logic;  -- whether it is a straight-up winner
             win_split : out std_logic;  -- whether it is a split bet winner
             win_corner : out std_logic
        ); -- whether it is a corner bet winner
end component;
 
-- spin wheel generates random numbers 
  component spinwheel 
	
	  PORT(
		      fast_clock : IN  STD_LOGIC;  -- This will be a 27 Mhz Clock
		      resetb : IN  STD_LOGIC;      -- asynchronous reset
		      spin_result  : OUT UNSIGNED(5 downto 0)
		    
		    );  -- current value of the wheel
      
    END component;  
    
   --segment display
  component digit7seg 
      
	 PORT (
          digit : IN  UNSIGNED(3 DOWNTO 0);  -- number 0 to 0xF
          seg7 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)  -- one per segment
	     );
   END component;
  
  -- money tracker
  
  component new_balance 
  
  PORT(
       money : in unsigned(15 downto 0);
       bet_amount : in unsigned(2 downto 0);
       win_straightup : in std_logic;
       win_split : in std_logic;
       win_corner : in std_logic;
       new_money : out unsigned(15 downto 0)
      );
        
    END component;
    
    -- n bit flip-flop 
   component vdffe  -- n-bit Register with Load Enable (use sDFFE for std_logic)
     generic( n: integer := 1 );
        port( clk: in std_logic;
          en: in std_logic;
          D: in unsigned( n-1 downto 0 );
          Q: out unsigned( n-1 downto 0 ) );
  end component;
  
    component vDFF 
        generic( n: integer := 1 );
        port( clk: in std_logic;
          resetb: in std_logic;
          D: in unsigned( n-1 downto 0 );
          Q: out unsigned( n-1 downto 0 ) );
     end component;
    

--------------- end of component declarations ----------------


----------- signal declarations --------------
signal spin_result, spin_result_latched, bet_target : unsigned( 5 downto 0) ;  
signal bet_modifier : unsigned(3 downto 0) ; 
signal win_straightup, win_split, win_corner : std_logic ;
signal new_money, money : unsigned (15 downto 0) ; 
signal bet_amount : unsigned(2 downto 0); 



------------end of signal declarations------------

BEGIN 
   
  SpinwheelBlock : spinwheel PORT map(CLOCK_27, KEY(1), spin_result); 
register2 :  VDFFE generic map (6) port map( key(0), KEY(1), spin_result, spin_result_latched); 
Register3 :  vdffe generic map (6) port map( KEY(0), KEY(1), sw(5)&sw(4)&sw(3)&sw(2)&sw(1)&sw(0), bet_target);
register4 :  vdffe generic map (4) port map (key(0), key(1), sw(9)&sw(8)&sw(7)&sw(6), bet_modifier);  
Register6 :  vdffe generic map (3) port map (key(0),key(1),sw(12)&sw(11)&sw(10), bet_amount);
Register7 :  vdffe generic map (16) port map (key(0),key(1),new_money, money);
  winBlock : win port map (spin_result_latched,bet_target,bet_modifier,win_straightup,win_split,win_corner);
  newBalance : new_balance port map (money, bet_amount, win_straightup, win_split, win_corner, new_money);
  hex0init :  digit7seg port map(new_money(3 downto 0) ,hex0); 
  hex1init :  digit7seg port map(new_money(7 downto 4) ,hex1);
  hex2init :  digit7seg port map(new_money(11 downto 8) ,hex2);
  hex3init :  digit7seg port map(new_money(15 downto 12) ,hex3);
  hex6init :  digit7seg port map(spin_result_latched(3 downto 0),hex6);
  hex7init :  digit7seg port map ("00"& spin_result_latched (5 downto 4)  ,hex7);
  hex4 <= "1111111";
  hex5 <= "1111111";  
  
  process (all)
  begin 
      if ( win_straightup = '1') then
    LEDG(0) <= '1';
  end if;
   if ( win_split = '1') then
    LEDG(1) <= '1';
  end if;  
    if ( win_corner = '1') then
    LEDG(2) <= '1';
  end if;  
        
  end process;  
  
  
END;






