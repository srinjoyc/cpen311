--------------------------------------------------------
--
--  This is the skeleton file for Lab 1 Phase 3.  You should
--  start with this file when you describe your state machine.  
--  
--------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

--------------------------------------------------------
--
--  This is the entity part of the top level file for Phase 3.
--  The entity part declares the inputs and outputs of the
--  module as well as their types.  For now, a signal of
--  “std_logic” type can take on the value ‘0’ or ‘1’ (it
--  can actually do more than this).  A signal of type
--  std_logic_vector can be thought of as an array of 
--  std_logic, and is used to describe a bus (a parallel 
--  collection of wires).
--
--  Note: you don't have to change the entity part.
--  
----------------------------------------------------------

entity state_machine is
   port (clk : in std_logic;  -- clock input to state machine
         resetb : in std_logic;  -- active-low reset input
         skip : in std_logic;     -- skip input
         hex0 : out std_logic_vector(6 downto 0)  -- output of state machine
            -- Note that in the above, hex0 is a 7-bit wide bus
            -- indexed using indices 6, 5, 4 ... down to 0.  The
            -- most-significant bit is hex(6) and the least significant
            -- bit is hex(0)
   );
end state_machine;

----------------------------------------------------------------
--
-- The following is the architecture part of the state machine.  It 
-- describes the behaviour of the state machine using synthesizable
-- VHDL.  
--
----------------------------------------------------------------- 

architecture behavioural of state_machine is

--signal declarations
signal next_state, current_state : std_logic_vector(2 downto 0);
begin

-- state changes, determines next state based on current state, combinational block
 
 process(all)
    begin 
      case current_state is 
      when "000" => if (skip= '0') then 
                      next_state <= "001";
                   else 
                    next_state <= "011";    --corresponds to s
                    end if;
      when "001" => if (skip= '0') then 
                      next_state <= "011";
                   else 
                    next_state <= "111"; 
                    end if; -- correponds to r 
      when "011" => if (skip= '0') then 
                      next_state <= "111";
                   else 
                    next_state <= "100";
                    end if; -- corresponds to i
      when "111" => if (skip= '0') then 
                      next_state <= "100";
                   else 
                    next_state <= "110";
                    end if; -- corresponds to n
      when "100"  => if (skip= '0') then 
                      next_state <= "110";
                   else 
                    next_state <= "101"; 
                    end if;-- corresponds to j
      when "110"  =>  if (skip= '0') then 
                      next_state <= "101";
                   else 
                    next_state <= "000"; 
                    end if;-- corresponds to o
      when "101"  =>  if (skip= '0') then 
                      next_state <= "000";
                   else 
                    next_state <= "001"; 
                    end if;-- -- corresponds to y
      when others => next_state <= "000"; 
      end case;
if (resetb='0') then --it says that resetb is low activated in the entity declaration so i set it equal to zero
next_state <= "000";
end if;
		end process;

 --outputs, prints current state on hex display
 
  process(all)
    begin
  if (current_state = "000") then  -- corresponds to s
    hex0 <= "0010010";
  elsif (current_state = "001") then -- corresponds to r
    hex0 <= "0101111";
  elsif (current_state = "011") then -- corresponds to i 
    hex0 <= "1101111";
  elsif (current_state = "111") then -- corresponds t n
    hex0 <= "0101011";
  elsif (current_state = "100") then -- corresponds t j
    hex0 <= "1110001";
  elsif (current_state = "110") then -- corresponds t o
    hex0 <= "0100011";
  elsif (current_state = "101") then -- corresponds t y
    hex0 <= "0010001";
	else hex0 <= "1111111"; -- corresponds to a null state, shows nothing
end if; 
end process;

--clock, syncronous reset 
process (clk) 
begin 
if (rising_edge(clk)) then 
current_state <= next_state;
end if;
end process;

end behavioural;
