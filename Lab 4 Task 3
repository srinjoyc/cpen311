LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;

ENTITY task2 IS
	PORT (CLOCK_50,AUD_DACLRCK, AUD_ADCLRCK, AUD_BCLK,AUD_ADCDAT			:IN STD_LOGIC;
			CLOCK_27															:IN STD_LOGIC;
			KEY : IN STD_LOGIC_VECTOR (3 downto 0);
			SW																	:IN STD_LOGIC_VECTOR(17 downto 0);
        
			I2C_SDAT															:INOUT STD_LOGIC;
			I2C_SCLK,AUD_DACDAT,AUD_XCK								:OUT STD_LOGIC);
END task2;

ARCHITECTURE Behavior OF task2 IS

   -- CODEC Cores
	
	COMPONENT clock_generator
		PORT(	CLOCK_27														:IN STD_LOGIC;
		    	reset															:IN STD_LOGIC;
				AUD_XCK														:OUT STD_LOGIC);
	END COMPONENT;

	COMPONENT audio_and_video_config
		PORT(	CLOCK_50,reset												:IN STD_LOGIC;
		    	I2C_SDAT														:INOUT STD_LOGIC;
				I2C_SCLK														:OUT STD_LOGIC);
	END COMPONENT;
	
	COMPONENT audio_codec
		PORT(	CLOCK_50,reset,read_s,write_s							:IN STD_LOGIC;
				writedata_left, writedata_right						:IN STD_LOGIC_VECTOR(23 DOWNTO 0);
				AUD_ADCDAT,AUD_BCLK,AUD_ADCLRCK,AUD_DACLRCK		:IN STD_LOGIC;
				read_ready, write_ready									:OUT STD_LOGIC;
				readdata_left, readdata_right							:OUT STD_LOGIC_VECTOR(23 DOWNTO 0);
				AUD_DACDAT													:OUT STD_LOGIC);
	END COMPONENT;

	SIGNAL read_ready, write_ready, read_s, write_s		      :STD_LOGIC;
	SIGNAL writedata_left, writedata_right							:STD_LOGIC_VECTOR(23 DOWNTO 0);	
	SIGNAL readdata_left, readdata_right							:STD_LOGIC_VECTOR(23 DOWNTO 0);	
	SIGNAL reset															:STD_LOGIC;
	
	--signals we added
	signal drive : std_logic;
	signal counter: integer:= 0; 
	signal index: integer:= 1;
	
	-- array declarations
	type samples_type is array (0 to 7) of integer;
	 signal samples_array : samples_type := (183, 163, 145, 137, 123, 109, 97, 11); 
	type counterbound_type is array (0 to 7) of integer;
	 signal counterbound_array : counterbound_type := (91, 81, 72, 68, 61, 54, 48, 5);
	
	-- constants
	constant min_amplitude : signed := "100000000000000000000000"; -- corresponds to -2^15
	constant max_amplitude : signed := "011111111111111111111111"; -- corresponds to +2^15
	constant samples : integer := 183;
	constant zero_amplitude: signed := "000000000000000000000000"; 
BEGIN

	reset <= NOT(KEY(0));
	read_s <= '0';
	--drive <= '0';

	my_clock_gen: clock_generator PORT MAP (CLOCK_27, reset, AUD_XCK);
	cfg: audio_and_video_config PORT MAP (CLOCK_50, reset, I2C_SDAT, I2C_SCLK);
	codec: audio_codec PORT MAP(CLOCK_50,reset,read_s,write_s,writedata_left, writedata_right,AUD_ADCDAT,AUD_BCLK,AUD_ADCLRCK,AUD_DACLRCK,read_ready, write_ready,readdata_left, readdata_right,AUD_DACDAT);

        -- rest of your code goes here
    process (clock_50, reset)
      
      begin 
      
		if(rising_edge(clock_50)) then 
				
				if (write_ready = '1') then 
				drive <= '1';
				write_s <= '1';
				elsif (write_ready = '0')then  -- (write_ready = '0') then 
			   drive <= '0';
				write_s <= '0';
			   else				
				end if;
				
				if (counter < samples_array(index) ) then  
				counter <= counter + 1;
				else counter <= 0;
				end if;
				
		  end if;       
        
   end process;
    
    
    process(all)
      
      begin 
        if (drive = '1') then 
          
			 if index < 7 then 
          
			 if (counter < counterbound_array(index) )  then 
			   writedata_left <= std_LOGIC_VECTOR(max_amplitude);
				writedata_right <= std_LOGIC_VECTOR(max_amplitude);            
           elsif (counter > (counterbound_array(index)+1) ) then  
            writedata_left <= std_LOGIC_VECTOR(min_amplitude);
				writedata_right <= std_LOGIC_VECTOR(min_amplitude);
          else
         end if; 
			
			else 		
			
			writedata_left <= std_LOGIC_VECTOR(zero_amplitude);
			writedata_right <= std_LOGIC_VECTOR(zero_amplitude);
			
			end if;
        
        elsif (drive = '0') then
		 		writedata_left <= std_LOGIC_VECTOR(zero_amplitude);
		 		writedata_right <= std_LOGIC_VECTOR(zero_amplitude);
			else
        end if;      
    
    end process;
   
	
	process (all) 
	begin 
	if (sw(0)='1') then 
	index <= 0;
	elsif(sw(1)='1')then
	index <= 1;
	elsif(sw(2)='1')then
	index <= 2;
	elsif(sw(3)='1')then
	index <= 3;
	elsif(sw(4)='1')then
	index <= 4;
	elsif(sw(5)='1')then
	index <= 5;
	elsif(sw(6)='1')then
	index <= 6;
	else 
	index <=7;
	end if;
	
	end process;
	
		

END Behavior;
